#ifndef __MSCANNER_INTERFACE_H__
#define __MSCANNER_INTERFACE_H__


#ifndef APUS_DLL
# ifdef _WIN32
#  if defined( BUILD_DLL )
#    define APUS_DLL __declspec(dllexport)
#  elif defined( USE_DLL )
#    define APUS_DLL __declspec(dllimport)
#  else
#    define APUS_DLL
#  endif
# else
#  define APUS_DLL
# endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

#define IMAGE_LENGTH_MIN 16
#define IMAGE_LENGTH_MAX 8191

enum CONFIG_INFO {
	/*
	 * ---------------------------------------------------------------------- *
	 *                               只读信息
	 * ---------------------------------------------------------------------- *
	 */
	CONFIG_VERSION_INFO            = 0X2D39E6A9,       /* [char*]<read-only> 解码库的版本号：长度应大于40 */
	CONFIG_DM_SETUP_STATE          = 0X354C6616,       /* [int]<read-only> 是否安装DM解码：1.已安装；0.未安装 */
	CONFIG_QR_SETUP_STATE          = 0X183C0737,       /* [int]<read-only> 是否安装QR解码：1.已安装；0.未安装 */
	/*
	 * ---------------------------------------------------------------------- *
	 *                               解码设置
	 * ---------------------------------------------------------------------- *
	 */
	CONFIG_MODE                    = 0X5D45B49A,       /* [int] 一键配置, 参考MODE_VALUE */

	CONFIG_EXPAND_DECODE           = 0X56A1DEE7,       /* [int = 0] 图像是否镜像：0.正向解码；1.优先正向；2.自动；3.优先逆向；4逆向解码 */
	CONFIG_V4_ENABLE			   = 0X41700059,	   /* [int = 0] v4版本是否启用：0.不启用， 1.启用 */
	CONFIG_IMAGE_MIRROR            = 0X308FFB11,       /* [int = 3] 图像是否镜像：1.非镜像；2.镜像；3.自动判断 */
	CONFIG_CODE_COLOR              = 0X696A8959,       /* [int = 3] 条码颜色：1.正色；2.反色；3.自动判断 */
	CONFIG_BARCODE_NUMBER          = 0X0CF12874,       /* [int = 1] 条码数量：1 ~ 99 */
	CONFIG_SEARCH_MODE             = 0X1F88A14F,       /* [int = 1] 搜索模式：0 ~ 1 0.正常模式 1.顶层优先(设置该模式会增加带框条码的成功率)*/
	CONFIG_DECODE_MODE             = 0X1AC5F2A9,       /* [int = 0] 解码模式：0.成功率优先; 1.速度优先 */
	CONFIG_IMAGE_HASH_CHECK        = 0X5A04BC29,       /* [int = 0] 连续传入相同图片时，检查图片是否相同，以确保数据共享: 0.不检查，1.检查 */
	CONFIG_ERASE_ECC               = 0X195CFBEC,       /* [int = 0] 是否使用擦除校验模式: 0.不使用，1.使用（特定条码【涂抹条码、logo条码】） */
	CONFIG_MATCH_THRESHOLD         = 0X5CFF4E5D,       /* [int = 70] 条码匹配阈值: 45 ~ 95 */
	CONFIG_MORPH_PYRAMID		   = 0X18B35CF5,       /* [int = 0] 形态学金字塔：0.关闭；1.腐蚀；2.膨胀；3.所有 */
	CONFIG_EPROCESS				   = 0X42E22824,	   /* [int = 1] 预处理模式：1.正常模式，2.预处理模式(针对凹坑码)，3. ALL*/



	CONFIG_RESULT_CALLBACK         = 0X71999F2D,       /* [void* = NULL]<write-only> 结果回调：译码成功将调用该函数 */
	CONFIG_PROGRESS_CALLBACK       = 0X26BE1B26,       /* [void* = NULL]<write-only> 状态回调：当进入到某个状态时将调用该函数 */
	CONFIG_PRINT_CALLBACK          = 0X78CC741A,       /* [void* = NULL]<write-only> 输出回调，当进入某一状态时调用 */

	CONFIG_DM_ENABLE               = 0X0E734BDB,       /* [int = 1] 是否开启DM解码：0.不开启；1.模块码；2.点阵码；4.环状码；7.ALL */
	CONFIG_QR_ENABLE               = 0X2263133B,       /* [int = 1] 是否开启QR解码：0.不开启；1.模块码；2.点阵码；4.环状码；7.ALL */
	CONFIG_QR_LOGO_RATIO           = 0X116AD6BF,       /* [double = 0.25] 设置QR码中心logo的尺寸占比（0 ~ 0.3） */
	CONFIG_CODE_LEVEL			   = 0X55483A05,	   /* [int = 0] 是否开启条码等级判定:开启后会记录解码信息，开启后会额外增加耗时 */
};

enum CODE_TYPE {
	CODE_TYPE_DM = 1,
	CODE_TYPE_QR = 2,
	CODE_TYPE_ALL = (CODE_TYPE_DM + CODE_TYPE_QR)
};
/* @zsh:当存在冲突时，后一配置会覆盖之前配置 */
enum MODE_VALUE {
	/* 解码库 */
	mNORMAL         = 0,                       // 正向解码												/* @zsh: 仅使用正向解码库解码 */			 
	mNORMAL_PRIOR   = 1,                       // 正向优先												/* @zsh: 正向逆向同时开启，优先正向 */
	mAUTO           = 2,                       // 自动													/* @zsh: 会自动判定使用正反向*/
	mNEGATIVE_PRIOR = 3,                       // 逆向优先												/* @zsh: 正向逆向同时开启，优先逆向*/
	mNEGATIVE       = 4,                       // 逆向解码												/* @zsh: 仅使用逆向解码库进行解码*/
	mOLD            = 5,                       // 使用旧解码库											/* @zsh: 正向解码使用v4解码库，对带框DM码更好*/
	mBOTH           = 8,                       // 同时使用新旧解码库									/* @zsh: 同时使用v4,v5版本*/
	
	/* 普通配置 */
	mMULTIPLE       = 16,                      // 多条码解码											/* @zsh:不配置该项,则单解码模式，如果解码成功就直接结束*/
	mFAST           = 32,                      // 快速解码												/* @zsh:开启后会去除正向解码的部分操作，使得解码速度更快*/
	
	/* 条码类型 */
	mDM             = 64,                      // DM码													/* */
	mQR             = 128,                     // QR码													/* */
	mALL            = mDM | mQR,               // 所有码制类型											/* @zsh:不配置该部分，则不解对应码*/

    /* 逆向解码配置 */
	mDOT            = 256,                     // 点阵码												/* */
	mANNULAR        = 512,                     // 环状码												/* */
	mHETEROTYPIC    = mDOT | mANNULAR,         // 所有异形码											/* @zsh:不配置该项，则逆向不对对应类型码解码*/
    
	/* 正向解码配置 */
	mTOP_PRIOR      = 1024,                    // 顶层优先，可提高带框条码解码成功率					/* @zsh:针对带框条码的优化，开启后对带框码有优化*/ 
	mERASE_ECC      = 2048,                    // 擦除校验												/* @zsh:开启后，会对中间存在图标的码进行优化*/

	/* 配置模式 */
	MODE_normal     = mNORMAL,                 // 正常模式												/* @zsh:只包含正向解码，成功率优先，会尝试内部所有的方法*/
	MODE_fast       = mFAST,                   // 速度优先模式											/* @zsh:只包含正向解码，相比于正常模式这里去除了一些可以增加成功率的操作：如二值化和采样方法*/
	MODE_old        = mOLD,                    // 旧解码库模式											/* @zsh:使用v4版本解码库进行解码*/
	MODE_saturation = mNORMAL_PRIOR | mBOTH,   // 饱和解码模式											/* @zsh:正向优先，并且开启v4版本解码库 */
};

#ifndef iMat_STRUCT
#define iMat_STRUCT
typedef struct iMat {
	unsigned char* data;
	unsigned int rows, cols, channels;
	unsigned int stride;
	unsigned int capacity;
}iMat;
#endif


typedef struct CodeResult {
	int type;                   /* 码制 */
	const char* string;         /* 字符串 */
	int length;                 /* 字符串长度 */
	int position[4][2];         /* 二维码四个角点的位置 */
}CodeResult;

typedef struct CodeGrade {
	unsigned char grade[12];
}CodeGrade;


typedef struct PointInfo {
	int x;					/* 坐标x */
	int y;					/* 坐标y */
	unsigned char type;			/* 类型 */
}PointInfo;

typedef struct CodeLevelInfo {

	int type;								/* 码制 */
	const char* string;						/* 字符串 */
	int length;								/* 字符串长度 */
	iMat img;								/* 操作图像 */
	int position[4][2];						/* 二维码四个角点的位置 */
	int code_vision[2];						/* 条码版本号 */
	PointInfo* module_position;				/* 每个模块所在位置,以及类型 */

	int cycle_decode;						/* 正向解码循环次数 */

	int nerrors;							/* 检测到的错误数t */
	int nerases;							/* 擦除数量e */
	int nmpcs;								/* 擦除模式下，防止误码预留p */
	int neccs;								/* 错误码字数d */

	int decoder_type;						/* 解码库类型,正向v5:0, 正向v4:1, 逆向:2 */

	int light_type;                        /* 正射或者反射，正射:1反射:0*/
}CodeLevelInfo;

/*********************************************************************************
 * 结果回调函数
 *********************************************************************************
 * 参数：
 *      char* s_tag                扫码器的标记
 *      void* result               结果指针
 *********************************************************************************/
typedef void (*RESULT_CALLBACK)(char* s_tag, void* result);


/*********************************************************************************
 * 中断回调函数
 *********************************************************************************
 * 参数：
 *      char* s_tag                扫码器的标记
 * 返回：
 *      int = 0                    继续解码
 *            1                    结束解码
 *********************************************************************************/
typedef int (*INTERRUPT_CALLBACK)(char* s_tag);


/*********************************************************************************
 * 打开一个属性页
 *********************************************************************************
 * 返回：
 *      void*                      属性页指针
 *********************************************************************************/
APUS_DLL void* MOS_openPropertyPage();


/*********************************************************************************
 * 关闭一个属性页
 *********************************************************************************
 * 参数：
 *      void* property_page        一个属性页指针
 * 返回：
 *      void* = NULL               关闭成功，返回NULL
 *            = property_page      关闭失败，返回原指针
 *********************************************************************************/
APUS_DLL void* MOS_closePropertyPage(void* property_sheet);


/*********************************************************************************
 * 属性页设置
 *********************************************************************************
 * 参数：
 *      void* object               属性页指针
 *      unsigned int tag           属性选项（参见CONFIG_INFO表）
 *      ...                        属性值（部分属性项可以指定多个值）
 * 返回：
 *      int                        设置成功返回1，否则返回0
 *********************************************************************************/
APUS_DLL int MOS_set(void* object, unsigned int tag, ...);


/*********************************************************************************
 * 从属性页获取属性值
 *********************************************************************************
 * 参数：
 *      void* object               属性页指针
 *      unsigned int tag           属性选项（参见CONFIG_INFO表）
 *      ...                        属性值指针（部分属性项可以获得多个值）
 * 返回：
 *      int                        设置成功返回1，否则返回0
 *********************************************************************************/
APUS_DLL int MOS_get(void* object, unsigned int tag, ...);


/*********************************************************************************
 * 打开一个扫码器
 *********************************************************************************
 * 参数：
 *      char* s_tag                扫码器的标记，用于传入到回调函数中
 *      void* property_page        使用属性页初始化扫码器
 *                                 若 = NULL，则使用默认属性
 * 返回：
 *      void*                      扫码器指针
 *********************************************************************************/
APUS_DLL void* MOS_openScanner(char* s_tag, void* property_sheet);


/*********************************************************************************
 * 关闭一个扫码器
 *********************************************************************************
 * 参数：
 *      void* scanner              扫码器指针
 * 返回：
 *      void* = NULL               关闭成功，返回NULL
 *            = handle             关闭失败，返回原指针
 *********************************************************************************/
APUS_DLL void* MOS_closeScanner(void* scanner);


/*********************************************************************************
 * 设置解码图像的尺寸
 *********************************************************************************
 * 参数：
 *      void* scanner              扫码器指针
 *      int width                  图像宽度
 *      int height                 图像高度
 * 返回：
 *      int                        成功返回1，失败返回0
 *********************************************************************************/
APUS_DLL int MOS_setImageSize(void* scanner, int width, int height);


/*********************************************************************************
 * 载入图片数据
 *********************************************************************************
 * 参数：
 *      void* scanner              扫码器指针
 *      const unsigned char* data  8位灰度图像数据
 * 返回：
 *      int                        成功返回1，失败返回0
 *********************************************************************************/
APUS_DLL int MOS_loadImage(void* scanner, const unsigned char* data);


/*********************************************************************************
 * 设置解码区域
 *********************************************************************************
 * 参数：
 *      void* scanner              扫码器指针
 *      int xmin                   解码区域左上角x坐标
 *      int ymin                   解码区域左上角y坐标
 *      int nx                     解码区域的宽度
 *      int ny                     解码区域的高度
 * 返回：
 *      int                        成功返回1，失败返回0
 *********************************************************************************/
APUS_DLL int MOS_selectRegion(void* scanner, int xmin, int ymin ,int nx, int ny);


/*********************************************************************************
 * 设置解码类型
 *********************************************************************************
 * 参数：
 *      void* scanner              扫码器指针
 *      int type                   码制
 * 返回：
 *      int                        成功返回1，失败返回0
 *********************************************************************************/
APUS_DLL int MOS_selectType(void* scanner, int type);


/*********************************************************************************
 * 设置优先解码类型
 *********************************************************************************
 * 参数：
 *      void* scanner              扫码器指针
 *      int type                   码制
 * 返回：
 *      int                        成功返回1，失败返回0
 *********************************************************************************/
APUS_DLL int MOS_firstType(void* scanner, int type);


/*********************************************************************************
 * 解码
 *********************************************************************************
 * 参数：
 *      void* scanner              扫码器指针
 * 返回：
 *      int                        解码成功的数量
 *********************************************************************************/
APUS_DLL int MOS_decode(void* scanner);


/*********************************************************************************
 * 获取扫码结果
 *********************************************************************************
 * 参数：
 *      void* object               结果回调函数传递的结果指针/成功解码后的扫码器指针
 *      CodeResult* result         结果存放位置
 * 返回：
 *      int                        成功返回1，否则返回0
 *********************************************************************************/
APUS_DLL int MOS_getResult(void* object, CodeResult* result);

/*********************************************************************************
 * 获取条码评价等级
 *********************************************************************************
 * 参数：
 *      void* object               结果回调函数传递的结果指针/成功解码后的扫码器指针
 *      CodeGrade* codeGrade       结果存放位置
 * 返回：
 *      int                        成功返回1，否则返回0
 *********************************************************************************/
APUS_DLL int MOS_getGrade(void* object, CodeGrade* grade);


APUS_DLL int MOS_getLevelInfo(void* object, CodeLevelInfo* levelInfo);

/*********************************************************************************
 * 输出日志
 *********************************************************************************
 * 参数：
 *      void* object               回调函数传递的指针/成功解码后的扫码器指针
 *      unsigned int tag           日志标志
 *      void* fp                   输出位置（文件指针）
 * 返回：
 *      int                        成功返回1，否则返回0
 *********************************************************************************/
APUS_DLL int MOS_print(void* object, unsigned int tag, void* fp);


/*********************************************************************************
 * 将当前解码的样签写入文件中
 *********************************************************************************
 * 参数：
 *      void* scanner              扫码器指针
 *      const char* path_name      bmp/pgm/ppm文件名
 * 返回：
 *      int                        成功返回1，否则返回0
 *********************************************************************************/
APUS_DLL int MOS_writeImage(void* scanner, const char* path_name);


/*********************************************************************************
 *  创建一个iMat用于存放图像数据
 *********************************************************************************
 * 返回：
 *      iMat*                      创建成功返回指针，否则返回NULL
 *********************************************************************************/
APUS_DLL iMat* iMat_createZero();


/*********************************************************************************
 *  销毁iMat
 *********************************************************************************
 * 参数：
 *      iMat* mat                  iMat指针
 * 返回：
 *      iMat* = NULL               关闭成功，返回NULL
 *                                 关闭失败，返回原指针
 *********************************************************************************/
APUS_DLL iMat* iMat_destroy(iMat* mat);


/*********************************************************************************
 *  从bmp/pbm/pgm/ppm文件中读取图像数据，并转为灰度图像
 *********************************************************************************
 * 参数：
 *      iMat* mat                  图像数据存放位置
 *      const char* filename       bmp/pbm/pgm/ppm文件名
 * 返回：
 *      int                        成功返回1，失败返回0
 *********************************************************************************/
APUS_DLL int iMat_readImage(iMat* dst, const char* filename);


#include <stdint.h>
/*********************************************************************************
 *  获取当前系统的时间戳，单位为ms
 *********************************************************************************
 * 返回：
 *      int64_t                    当前系统时间戳
 *********************************************************************************/
APUS_DLL int64_t now_timestamp();


#ifdef __cplusplus
}
#endif
#endif